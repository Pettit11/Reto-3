""python class Point:
    def __init__(self, x: float, y: float):
        self.x = x
        self.y = y


class Line:
    def __init__(self, start: Point, end: Point):
        self.start = start
        self.end = end

    def compute_length(self):
        return ((self.start.x - self.end.x) ** 2 + (self.start.y - self.end.y) ** 2) ** 0.5


class Rectangle:
    def __init__(self):
        self.width = None
        self.height = None
        self.center = None
        self.bottom_left = None
        self.upper_right = None

    def initialize_bottom_left(self, point: Point, width: float, height: float):
        self.bottom_left = point
        self.width = width
        self.height = height
        self.compute_center()

    def initialize_center(self, point: Point, width: float, height: float):
        self.center = point
        self.width = width
        self.height = height
        self.compute_corners()

    def initialize_corners(self, bottom_left: Point, upper_right: Point):
        self.bottom_left = bottom_left
        self.upper_right = upper_right
        self.compute_width_height()
        self.compute_center()

    def initialize_lines(self, left: Line, right: Line, top: Line, bottom: Line):
        self.bottom_left = left.start
        self.upper_right = right.end
        self.width = right.start.x - left.start.x
        self.height = top.start.y - bottom.start.y
        self.compute_center()

    def compute_center(self):
        self.center = Point(self.bottom_left.x + self.width / 2, self.bottom_left.y + self.height / 2)

    def compute_corners(self):
        half_width = self.width / 2
        half_height = self.height / 2
        self.bottom_left = Point(self.center.x - half_width, self.center.y - half_height)
        self.upper_right = Point(self.center.x + half_width, self.center.y + half_height)

    def compute_width_height(self):
        self.width = self.upper_right.x - self.bottom_left.x
        self.height = self.upper_right.y - self.bottom_left.y

    def compute_area(self):
        return self.width * self.height

    def compute_perimeter(self):
        return 2 * (self.width + self.height)


class Square(Rectangle):
    def __init__(self):
        super().__init__()

    def initialize_square(self, point: Point, side_length: float):
        super().initialize_center(point, side_length, side_length)

    def compute_interference_point(self, point: Point):
        if self.bottom_left.x <= point.x <= self.upper_right.x and \
           self.bottom_left.y <= point.y <= self.upper_right.y:
            return True
        return False


# Ejemplo de uso
p1 = Point(1, 1)
p2 = Point(4, 4)

# Inicializar rectángulo por Bottom-left corner(Point) + width and height
rect1 = Rectangle()
rect1.initialize_bottom_left(p1, 3, 2)
print("Rectángulo 1, Área:", rect1.compute_area())
print("Rectángulo 1, Perímetro:", rect1.compute_perimeter())

# Inicializar rectángulo por Center(Point) + width and height
rect2 = Rectangle()
rect2.initialize_center(p1, 3, 2)
print("Rectángulo 2, Área:", rect2.compute_area())
print("Rectángulo 2, Perímetro:", rect2.compute_perimeter())

# Inicializar rectángulo por Two opposite corners (Points)
rect3 = Rectangle()
rect3.initialize_corners(p1, p2)
print("Rectángulo 3, Área:", rect3.compute_area())
print("Rectángulo 3, Perímetro:", rect3.compute_perimeter())

# Inicializar un cuadrado
square = Square()
square.initialize_square(p1, 4)
print("Cuadrado, Área:", square.compute_area())
print("Cuadrado, Perímetro:", square.compute_perimeter())

# Verificar si un punto está dentro del cuadrado
p_inside = Point(2, 2)
p_outside = Point(5, 5)
print("El punto está dentro del cuadrado:", square.compute_interference_point(p_inside))  # Debe devolver True
print("El punto está dentro del cuadrado:", square.compute_interference_point(p_outside))  # Debe devolver Fals"" 
